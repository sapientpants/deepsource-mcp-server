import { DeepSourceClient } from '../deepsource';
import { jest } from '@jest/globals';

// Create a test subclass to expose private methods
class TestableDeepSourceClient extends DeepSourceClient {
  static testProcessVulnerabilityEdge(edge: unknown) {
    // @ts-expect-error - Accessing private method for testing
    return DeepSourceClient.processVulnerabilityEdge(edge);
  }

  static testIsValidVulnerabilityNode(node: unknown) {
    // @ts-expect-error - Accessing private method for testing
    return DeepSourceClient.isValidVulnerabilityNode(node);
  }

  static testMapVulnerabilityOccurrence(node: Record<string, unknown>) {
    // @ts-expect-error - Accessing private method for testing
    return DeepSourceClient.mapVulnerabilityOccurrence(node);
  }
}

describe('DeepSource Vulnerability Processing', () => {
  describe('processVulnerabilityEdge', () => {
    it('should return null for null or undefined edge', () => {
      expect(TestableDeepSourceClient.testProcessVulnerabilityEdge(null)).toBeNull();
      expect(TestableDeepSourceClient.testProcessVulnerabilityEdge(undefined)).toBeNull();
    });

    it('should return null for non-object edge', () => {
      expect(TestableDeepSourceClient.testProcessVulnerabilityEdge('string')).toBeNull();
      expect(TestableDeepSourceClient.testProcessVulnerabilityEdge(123)).toBeNull();
      expect(TestableDeepSourceClient.testProcessVulnerabilityEdge(true)).toBeNull();
    });

    it('should return null when node is missing', () => {
      const edge = { cursor: 'some-cursor' }; // Edge without node property
      expect(TestableDeepSourceClient.testProcessVulnerabilityEdge(edge)).toBeNull();
    });

    it('should process valid vulnerability nodes', () => {
      // Mock isValidVulnerabilityNode and mapVulnerabilityOccurrence for this test
      const originalIsValid = TestableDeepSourceClient.testIsValidVulnerabilityNode;
      const originalMap = TestableDeepSourceClient.testMapVulnerabilityOccurrence;

      // Mock dependencies
      // @ts-expect-error - Mocking private static method
      DeepSourceClient.isValidVulnerabilityNode = jest.fn().mockReturnValue(true);
      // @ts-expect-error - Mocking private static method
      DeepSourceClient.mapVulnerabilityOccurrence = jest.fn().mockReturnValue({
        id: 'vuln-1',
        severity: 'HIGH',
        packageName: 'test-package',
      });

      const edge = {
        node: {
          id: 'vuln-node-1',
          severity: 'HIGH',
        },
      };

      const result = TestableDeepSourceClient.testProcessVulnerabilityEdge(edge);

      expect(result).toEqual({
        id: 'vuln-1',
        severity: 'HIGH',
        packageName: 'test-package',
      });

      // Verify the mock was called with the node
      // @ts-expect-error - Accessing mocked method
      expect(DeepSourceClient.isValidVulnerabilityNode).toHaveBeenCalledWith(edge.node);
      // @ts-expect-error - Accessing mocked method
      expect(DeepSourceClient.mapVulnerabilityOccurrence).toHaveBeenCalledWith(edge.node);

      // Restore original methods after test
      // @ts-expect-error - Restoring private static method
      DeepSourceClient.isValidVulnerabilityNode = originalIsValid;
      // @ts-expect-error - Restoring private static method
      DeepSourceClient.mapVulnerabilityOccurrence = originalMap;
    });

    it('should return null for invalid vulnerability nodes', () => {
      // Mock isValidVulnerabilityNode to return false
      const originalIsValid = TestableDeepSourceClient.testIsValidVulnerabilityNode;

      // @ts-expect-error - Mocking private static method
      DeepSourceClient.isValidVulnerabilityNode = jest.fn().mockReturnValue(false);

      const edge = {
        node: {
          id: 'invalid-node',
        },
      };

      const result = TestableDeepSourceClient.testProcessVulnerabilityEdge(edge);
      expect(result).toBeNull();

      // Restore original method after test
      // @ts-expect-error - Restoring private static method
      DeepSourceClient.isValidVulnerabilityNode = originalIsValid;
    });
  });
});
