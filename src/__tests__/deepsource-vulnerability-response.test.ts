/**
 * Tests for the vulnerability response processing functions in DeepSourceClient
 * This file specifically targets line 1747 which handles early return for empty arrays
 */
import { jest, expect } from '@jest/globals';
import { DeepSourceClient } from '../deepsource.js';
import { getPrivateMethod } from './test-utils/private-method-access.js';

describe('DeepSourceClient vulnerability response processing', () => {
  // Get access to the private static method
  const processVulnerabilityResponse = getPrivateMethod<
    (_response: Record<string, unknown>) => {
      vulnerabilities: unknown[];
      pageInfo: Record<string, unknown>;
      totalCount: number;
    }
  >('processVulnerabilityResponse');

  describe('processVulnerabilityResponse', () => {
    // Mock for the iterateVulnerabilities method
    const mockIterator = jest.fn();
    let originalMethod: any;

    beforeEach(() => {
      // Store the original method
      originalMethod = (DeepSourceClient as any)['iterateVulnerabilities'];
      // Replace with a mock
      (DeepSourceClient as any)['iterateVulnerabilities'] = mockIterator;
    });

    afterEach(() => {
      // Restore the original method
      (DeepSourceClient as any)['iterateVulnerabilities'] = originalMethod;
      jest.clearAllMocks();
    });

    it('should return empty results for invalid data structure', () => {
      // Test with null/undefined
      expect(processVulnerabilityResponse(null as any)).toEqual({
        vulnerabilities: [],
        pageInfo: { hasNextPage: false, hasPreviousPage: false },
        totalCount: 0,
      });

      // Test with empty object
      expect(processVulnerabilityResponse({} as any)).toEqual({
        vulnerabilities: [],
        pageInfo: { hasNextPage: false, hasPreviousPage: false },
        totalCount: 0,
      });

      // Verify the iterator was not called
      expect(mockIterator).not.toHaveBeenCalled();
    });

    it('should early return for empty edges array - line 1747', () => {
      // Create a valid response structure but with empty edges array
      const mockResponse = {
        data: {
          data: {
            repository: {
              dependencyVulnerabilityOccurrences: {
                edges: [], // Empty array
                pageInfo: {
                  hasNextPage: true,
                  hasPreviousPage: false,
                  startCursor: 'cursor1',
                  endCursor: 'cursor2',
                },
                totalCount: 50,
              },
            },
          },
        },
      };

      const result = processVulnerabilityResponse(mockResponse as any);

      // Verify the correct result
      expect(result).toEqual({
        vulnerabilities: [],
        pageInfo: {
          hasNextPage: true,
          hasPreviousPage: false,
          startCursor: 'cursor1',
          endCursor: 'cursor2',
        },
        totalCount: 50,
      });

      // Verify the iterator was not called - this confirms line 1747 was hit
      expect(mockIterator).not.toHaveBeenCalled();
    });

    it('should process vulnerabilities for non-empty edges array', () => {
      // Mock the iterator to return some test vulnerabilities
      const mockVulnerabilities = [
        { id: 'vuln1', severity: 'HIGH' },
        { id: 'vuln2', severity: 'MEDIUM' },
      ];

      // Set up the iterator to yield the mock vulnerabilities
      mockIterator.mockImplementation(function* () {
        for (const vuln of mockVulnerabilities) {
          yield vuln;
        }
      });

      // Create a response with edges
      const mockResponse = {
        data: {
          data: {
            repository: {
              dependencyVulnerabilityOccurrences: {
                edges: [{ node: {} }, { node: {} }], // Non-empty array
                pageInfo: {
                  hasNextPage: false,
                  hasPreviousPage: true,
                },
                totalCount: 2,
              },
            },
          },
        },
      };

      const result = processVulnerabilityResponse(mockResponse as any);

      // Verify the correct result
      expect(result).toEqual({
        vulnerabilities: mockVulnerabilities,
        pageInfo: {
          hasNextPage: false,
          hasPreviousPage: true,
        },
        totalCount: 2,
      });

      // Verify the iterator was called with the edges
      expect(mockIterator).toHaveBeenCalledWith([{ node: {} }, { node: {} }]);
    });

    it('should handle missing pageInfo gracefully', () => {
      // Create a response with edges but missing pageInfo
      const mockResponse = {
        data: {
          data: {
            repository: {
              dependencyVulnerabilityOccurrences: {
                edges: [],
                totalCount: 0,
              },
            },
          },
        },
      };

      const result = processVulnerabilityResponse(mockResponse as any);

      // Verify default pageInfo is used
      expect(result).toEqual({
        vulnerabilities: [],
        pageInfo: {
          hasNextPage: false,
          hasPreviousPage: false,
        },
        totalCount: 0,
      });
    });

    it('should handle non-numeric totalCount gracefully', () => {
      // Create a response with edges but invalid totalCount
      const mockResponse = {
        data: {
          data: {
            repository: {
              dependencyVulnerabilityOccurrences: {
                edges: [],
                pageInfo: {},
                totalCount: 'not-a-number',
              },
            },
          },
        },
      };

      const result = processVulnerabilityResponse(mockResponse as any);

      // Verify totalCount is defaulted to 0
      expect(result.totalCount).toBe(0);
    });

    it('should handle missing dependencyVulnerabilityOccurrences - line 1720', () => {
      // Create a response where the repository exists but dependencyVulnerabilityOccurrences is missing
      const mockResponse = {
        data: {
          data: {
            repository: {
              // No dependencyVulnerabilityOccurrences property
              name: 'test-repo',
              id: 'repo-id',
            },
          },
        },
      };

      const result = processVulnerabilityResponse(mockResponse as any);

      // Verify empty result is returned
      expect(result).toEqual({
        vulnerabilities: [],
        pageInfo: {
          hasNextPage: false,
          hasPreviousPage: false,
        },
        totalCount: 0,
      });

      // Verify the iterator was not called
      expect(mockIterator).not.toHaveBeenCalled();
    });

    it('should handle non-object dependencyVulnerabilityOccurrences - line 1720', () => {
      // Create a response where dependencyVulnerabilityOccurrences is not an object
      const mockResponse = {
        data: {
          data: {
            repository: {
              dependencyVulnerabilityOccurrences: 'not-an-object', // String instead of object
              name: 'test-repo',
              id: 'repo-id',
            },
          },
        },
      };

      const result = processVulnerabilityResponse(mockResponse as any);

      // Verify empty result is returned
      expect(result).toEqual({
        vulnerabilities: [],
        pageInfo: {
          hasNextPage: false,
          hasPreviousPage: false,
        },
        totalCount: 0,
      });

      // Verify the iterator was not called
      expect(mockIterator).not.toHaveBeenCalled();
    });
  });
});
